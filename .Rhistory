usethis::use_vignette("Package Overview")
install.packages("usethis")
usethis::use_vignette("Package Overview")
usethis::use_vignette("Package-Overview")
First install the **CTVsuggest** package:
library(CTVsuggest)
library(devtools)
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
pkg-config --list-all | grep harfbuzz
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("DylanDijk/CTVsuggest")
library(CTVsuggest)
library(devtools)
install_github("DylanDijk/CTVsuggest")
document()
library(devtools)
install_github("DylanDijk/CTVsuggest")
library(CTVsuggest)
CTVsuggest()
CTVsuggest()
load(url("https://github.com/DylanDijk/CRAN-Task-Views-Recommendations/blob/main/Output/predicted_probs_for_suggestions.rda?raw=true"))
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview), drop = F], decreasing = T),, drop = F][1:n,]
taskview = "Econometrics", n = 5
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview), drop = F], decreasing = T),, drop = F][1:n,]
taskview
askview = "Econometrics"
n = 5
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview), drop = F], decreasing = T),, drop = F][1:n,]
taskview
taskview = "Econometrics"
n = 5
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview), drop = F], decreasing = T),, drop = F][1:n,]
predicted_probs_for_suggestions = as.matrix(predicted_probs_for_suggestions)
predicted_probs_for_suggestions
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview), drop = F], decreasing = T),, drop = F][1:n,]
suggestions
CTVsuggest()
load(url("https://github.com/DylanDijk/CRAN-Task-Views-Recommendations/blob/main/Output/predicted_probs_for_suggestions.rda?raw=true"))
predicted_probs_for_suggestions
predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F]
predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview), drop = F], decreasing = T),, drop = F]
order(predicted_probs_for_suggestions[,paste0(taskview), drop = F], decreasing = T)
predicted_probs_for_suggestions[,paste0(taskview), drop = F]
order(predicted_probs_for_suggestions[,paste0(taskview), drop = F], decreasing = T)
predicted_probs_for_suggestions[,paste0(taskview), drop = F]
predicted_probs_for_suggestions[,paste0(taskview)]
order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T)
predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T),, drop = F][1:n,]
load(url("https://github.com/DylanDijk/CRAN-Task-Views-Recommendations/blob/main/Output/predicted_probs_for_suggestions.rda?raw=true"))
predicted_probs_for_suggestions = as.matrix(predicted_probs_for_suggestions)
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T),, drop = F][1:n,]
taskview = "Econometrics"
n = 5
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T),, drop = F][1:n,]
suggestions
load(url("https://github.com/DylanDijk/CRAN-Task-Views-Recommendations/blob/main/Output/predicted_probs_for_suggestions.rda?raw=true"))
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T),, drop = F][1:n,]
suggestions
library(devtools)
install_github("DylanDijk/CTVsuggest")
library(CTVsuggest)
CTVsuggest()
library(devtools)
install_github("DylanDijk/CTVsuggest")
library(CTVsuggest)
CTVsuggest()
load(url("https://github.com/DylanDijk/CRAN-Task-Views-Recommendations/blob/main/Output/predicted_probs_for_suggestions.rda?raw=true"))
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T),, drop = F][1:n,]
taskview = "Econometrics"
n = 5
suggestions = predicted_probs_for_suggestions[,c(paste0(taskview), "Packages"), drop = F][order(predicted_probs_for_suggestions[,paste0(taskview)], decreasing = T),, drop = F][1:n,]
suggestions
document()
install_github("DylanDijk/CTVsuggest", force = T)
library(CTVsuggest)
CTVsuggest()
CTVsuggest(n = 5, taskview = "NaturalLanguageProcessing")
devtools::build_rmd()
use_r("get_data")
usethis::use_package("RWsearch")
usethis::use_package("cranly")
document()
get_data = function(){
message("Downloading package metadat from CRAN package repository")
RWsearch::tvdb_down(dir = "Data/")
# CRAN snapshot
## Data extracted from CRAN package repository
CRAN_data = tools::CRAN_package_db()
# There are some packages that are given twice.
# Most common difference in rows labeled as belonging to the same package is dependency on a more recent version of R.
# I have ignored the extra information and just removed duplicated packages.
CRAN_data = CRAN_data[!duplicated(CRAN_data$Package),]
### all_CRAN_pks is all of the current packages available in CRAN
all_CRAN_pks = CRAN_data$Package
## CRAN_data cleaned and converted into form that can be used by cranly
CRAN_cranly_data = cranly::clean_CRAN_db(packages_db = CRAN_data)
return(list(CRAN_data, all_CRAN_pks, CRAN_cranly_data))
}
get_data()
objects_test = get_data()
objects_test$CRAN_data
head(objects_test)
str(objects_test)
str(objects_test,1)
get_data = function(){
message("Downloading package metadat from CRAN package repository")
RWsearch::tvdb_down(dir = "Data/")
# CRAN snapshot
## Data extracted from CRAN package repository
CRAN_data = tools::CRAN_package_db()
# There are some packages that are given twice.
# Most common difference in rows labeled as belonging to the same package is dependency on a more recent version of R.
# I have ignored the extra information and just removed duplicated packages.
CRAN_data = CRAN_data[!duplicated(CRAN_data$Package),]
### all_CRAN_pks is all of the current packages available in CRAN
all_CRAN_pks = CRAN_data$Package
## CRAN_data cleaned and converted into form that can be used by cranly
CRAN_cranly_data = cranly::clean_CRAN_db(packages_db = CRAN_data)
return(list("CRAN_data" = CRAN_data, "all_CRAN_pks" = all_CRAN_pks, "CRAN_cranly_data" = CRAN_cranly_data))
}
get_data = function(){
message("Downloading package metadat from CRAN package repository")
RWsearch::tvdb_down(dir = "Data/", test = FALSE, limiting_n_observations = 100)
# CRAN snapshot
## Data extracted from CRAN package repository
CRAN_data = tools::CRAN_package_db()
# There are some packages that are given twice.
# Most common difference in rows labeled as belonging to the same package is dependency on a more recent version of R.
# I have ignored the extra information and just removed duplicated packages.
CRAN_data = CRAN_data[!duplicated(CRAN_data$Package),]
if(!test){
CRAN_data[sample(limiting_n_observations),]
}
### all_CRAN_pks is all of the current packages available in CRAN
all_CRAN_pks = CRAN_data$Package
## CRAN_data cleaned and converted into form that can be used by cranly
CRAN_cranly_data = cranly::clean_CRAN_db(packages_db = CRAN_data)
return(list("CRAN_data" = CRAN_data, "all_CRAN_pks" = all_CRAN_pks, "CRAN_cranly_data" = CRAN_cranly_data))
}
get_data = function(test = FALSE, limiting_n_observations = 100){
message("Downloading package metadat from CRAN package repository")
RWsearch::tvdb_down(dir = "Data/")
# CRAN snapshot
## Data extracted from CRAN package repository
CRAN_data = tools::CRAN_package_db()
# There are some packages that are given twice.
# Most common difference in rows labeled as belonging to the same package is dependency on a more recent version of R.
# I have ignored the extra information and just removed duplicated packages.
CRAN_data = CRAN_data[!duplicated(CRAN_data$Package),]
if(!test){
CRAN_data[sample(limiting_n_observations),]
}
### all_CRAN_pks is all of the current packages available in CRAN
all_CRAN_pks = CRAN_data$Package
## CRAN_data cleaned and converted into form that can be used by cranly
CRAN_cranly_data = cranly::clean_CRAN_db(packages_db = CRAN_data)
return(list("CRAN_data" = CRAN_data, "all_CRAN_pks" = all_CRAN_pks, "CRAN_cranly_data" = CRAN_cranly_data))
}
get_data = function(test = FALSE, limiting_n_observations = 100){
message("Downloading package metadat from CRAN package repository")
RWsearch::tvdb_down(dir = "Data/")
# CRAN snapshot
## Data extracted from CRAN package repository
CRAN_data = tools::CRAN_package_db()
# There are some packages that are given twice.
# Most common difference in rows labeled as belonging to the same package is dependency on a more recent version of R.
# I have ignored the extra information and just removed duplicated packages.
CRAN_data = CRAN_data[!duplicated(CRAN_data$Package),]
if(test){
CRAN_data[sample(limiting_n_observations),]
}
### all_CRAN_pks is all of the current packages available in CRAN
all_CRAN_pks = CRAN_data$Package
## CRAN_data cleaned and converted into form that can be used by cranly
CRAN_cranly_data = cranly::clean_CRAN_db(packages_db = CRAN_data)
return(list("CRAN_data" = CRAN_data, "all_CRAN_pks" = all_CRAN_pks, "CRAN_cranly_data" = CRAN_cranly_data))
}
get_data(test = T)
# CRAN snapshot
## Data extracted from CRAN package repository
CRAN_data = tools::CRAN_package_db()
# There are some packages that are given twice.
# Most common difference in rows labeled as belonging to the same package is dependency on a more recent version of R.
# I have ignored the extra information and just removed duplicated packages.
CRAN_data = CRAN_data[!duplicated(CRAN_data$Package),]
sample(limiting_n_observations)
limiting_n_observations = 100
sample(limiting_n_observations)
test
get_data = function(test = FALSE, limiting_n_observations = 100){
message("Downloading package metadat from CRAN package repository")
RWsearch::tvdb_down(dir = "Data/")
# CRAN snapshot
## Data extracted from CRAN package repository
CRAN_data = tools::CRAN_package_db()
# There are some packages that are given twice.
# Most common difference in rows labeled as belonging to the same package is dependency on a more recent version of R.
# I have ignored the extra information and just removed duplicated packages.
CRAN_data = CRAN_data[!duplicated(CRAN_data$Package),]
if(test){
CRAN_data[sample(size = limiting_n_observations, x = nrow(CRAN_data)),]
}
### all_CRAN_pks is all of the current packages available in CRAN
all_CRAN_pks = CRAN_data$Package
## CRAN_data cleaned and converted into form that can be used by cranly
CRAN_cranly_data = cranly::clean_CRAN_db(packages_db = CRAN_data)
return(list("CRAN_data" = CRAN_data, "all_CRAN_pks" = all_CRAN_pks, "CRAN_cranly_data" = CRAN_cranly_data))
}
test = T
limiting_n_observations = 100
# CRAN snapshot
## Data extracted from CRAN package repository
CRAN_data = tools::CRAN_package_db()
# There are some packages that are given twice.
# Most common difference in rows labeled as belonging to the same package is dependency on a more recent version of R.
# I have ignored the extra information and just removed duplicated packages.
CRAN_data = CRAN_data[!duplicated(CRAN_data$Package),]
sample(size = limiting_n_observations, x = nrow(CRAN_data))
CRAN_data[sample(size = limiting_n_observations, x = nrow(CRAN_data)),]
if(test){
CRAN_data[sample(size = limiting_n_observations, x = nrow(CRAN_data)),]
}
if(test){
CRAN_data = CRAN_data[sample(size = limiting_n_observations, x = nrow(CRAN_data)),]
}
### all_CRAN_pks is all of the current packages available in CRAN
all_CRAN_pks = CRAN_data$Package
## CRAN_data cleaned and converted into form that can be used by cranly
CRAN_cranly_data = cranly::clean_CRAN_db(packages_db = CRAN_data)
get_data = function(test = FALSE, limiting_n_observations = 100){
message("Downloading package metadat from CRAN package repository")
RWsearch::tvdb_down(dir = "Data/")
# CRAN snapshot
## Data extracted from CRAN package repository
CRAN_data = tools::CRAN_package_db()
# There are some packages that are given twice.
# Most common difference in rows labeled as belonging to the same package is dependency on a more recent version of R.
# I have ignored the extra information and just removed duplicated packages.
CRAN_data = CRAN_data[!duplicated(CRAN_data$Package),]
if(test){
CRAN_data = CRAN_data[sample(size = limiting_n_observations, x = nrow(CRAN_data)),]
}
### all_CRAN_pks is all of the current packages available in CRAN
all_CRAN_pks = CRAN_data$Package
## CRAN_data cleaned and converted into form that can be used by cranly
CRAN_cranly_data = cranly::clean_CRAN_db(packages_db = CRAN_data)
return(list("CRAN_data" = CRAN_data, "all_CRAN_pks" = all_CRAN_pks, "CRAN_cranly_data" = CRAN_cranly_data))
}
objects_test = get_data(test = T)
objects_test$CRAN_data
document()
check()
document()
load_all
load_all()
document()
devtools::document()
devtools::check()
tvdb_down()
RWsearch::tvdb_down()
RWsearch::tvdb_down
urlrds <- paste0(repos, "/src/contrib/Views.rds")
repos = getOption("repos")[1]
document()
library(devtools)
document()
The aim of this package is to give suggestions for packages to be added to Task Views. There is a main function `CTVsuggest()`
devtools::check()
devtools::document()
