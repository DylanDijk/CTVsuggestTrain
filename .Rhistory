# i = "Cluster"
# pkg = tvdb_vec()[i]
total_dec_21 <- cranlogs::cran_downloads(from = date %m-% months(1), to = date, packages = RWsearch::tvdb_pkgs(char = i, tvdb = input_CRAN_data$tvdb))
total_dec_21$package = factor(total_dec_21$package)
mnth_dwnloads[[i]] = total_dec_21 %>%
dplyr::group_by(package) %>%
dplyr::summarise(sum = sum(count))
}
#### Finding packages that have no assigned Task View that meet the decided download threshold ####
# Vector of package names that do not have a Task View
no_tsk_view_packages = igraph::V(pac_network_igraph)$name[!(igraph::V(pac_network_igraph)$name %in% Reduce(c,RWsearch::tvdb_pkgs(char = RWsearch::tvdb_vec(input_CRAN_data$tvdb), tvdb = input_CRAN_data$tvdb)))]
#### Finding packages that have no assigned Task View that meet the decided download threshold ####
# Vector of package names that do not have a Task View
no_tsk_view_packages = igraph::V(get_create_features_output$pac_network_igraph)$name[!(igraph::V(get_create_features_output$pac_network_igraph)$name %in% Reduce(c,RWsearch::tvdb_pkgs(char = RWsearch::tvdb_vec(input_CRAN_data$tvdb), tvdb = input_CRAN_data$tvdb)))]
# Remove R package, as it cannot be queried with other packages with cran_downloads
no_tsk_view_packages = no_tsk_view_packages[-which(no_tsk_view_packages == "R")]
# splitting into chunks
chunk_size = 500
n_chunks = ceiling(length(no_tsk_view_packages)/chunk_size)
no_tsk_downloads_ls = vector(mode = "list", length = n_chunks)
# splitting into chunks
chunk_size = 500
n_chunks = ceiling(length(no_tsk_view_packages)/chunk_size)
no_tsk_downloads_ls = vector(mode = "list", length = n_chunks)
i = 1
print(i)
j = (1 + (chunk_size*(i - 1))):(chunk_size + (chunk_size*(i - 1)))
no_tsk_downloads <- cranlogs::cran_downloads(from = date %m-% months(1), to = date, packages = no_tsk_view_packages[j])
no_tsk_downloads_ls[[i]] = no_tsk_downloads %>%
dplyr::group_by(package) %>%
dplyr::summarise(sum = sum(count)) %>%
filter(sum > 2500)
no_tsk_downloads_ls[[i]] = no_tsk_downloads %>%
dplyr::group_by(package) %>%
dplyr::summarise(sum = sum(count)) %>%
dplyr::filter(sum > 2500)
devtools::document()
devtools::load_all()
CTVsuggest:::.__NAMESPACE__.
CTVsuggest:::get_CRAN_logs(TEST = T)
debugSource("~/Documents/Projects/CTVsuggest/R/get_CRAN_logs.R")
get_CRAN_logs(TEST = TRUE)
debugSource("~/Documents/Projects/CTVsuggest/R/get_CRAN_logs.R")
get_CRAN_logs(TEST = TRUE)
debugSource("~/Documents/Projects/CTVsuggest/R/get_CRAN_logs.R")
get_CRAN_logs(TEST = TRUE)
debugSource("~/Documents/Projects/CTVsuggest/R/get_CRAN_logs.R")
get_CRAN_logs(TEST = TRUE)
get_CRAN_logs(TEST = TRUE)
cranlogs::cran_downloads(from = date %m-% months(1), to = date, packages = RWsearch::tvdb_pkgs(char = i, tvdb = input_CRAN_data$tvdb))
i = 1
j = (1 + (chunk_size*(i - 1))):(chunk_size + (chunk_size*(i - 1)))
no_tsk_downloads <- cranlogs::cran_downloads(from = date %m-% months(1), to = date, packages = no_tsk_view_packages[j])
no_tsk_downloads_ls[[i]] = no_tsk_downloads %>%
dplyr::group_by(package) %>%
dplyr::summarise(sum = sum(count)) %>%
dplyr::filter(sum > 2500)
# final chunk
j = (((n_chunks -1) * chunk_size) + 1):length(no_tsk_view_packages)
cranlogs::cran_downloads(from = date %m-% months(1), to = date, packages = no_tsk_view_packages[j])
no_tsk_downloads_ls[[n_chunks]] = no_tsk_downloads %>%
dplyr::group_by(package) %>%
dplyr::summarise(sum = sum(count)) %>%
dplyr::filter(sum > 2500)
# Number of not assigned packages that meet threshold
length(unique(rbindlist(no_tsk_downloads_ls)$package))
devtools::document()
devtools::check()
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
??CTVsuggest
# Get required objects from CTVsuggest:::get_data()
input_CRAN_data = CTVsuggest:::get_data(TEST = TEST, limiting_n_observations = limiting_n_observations)
TEST = FALSE
limiting_n_observations = 100
TEST = TRUE
# Get required objects from CTVsuggest:::get_data()
input_CRAN_data = CTVsuggest:::get_data(TEST = TEST, limiting_n_observations = limiting_n_observations)
# This script creates the NLP features for the model using Task View text and Package description text.
message("Creating the NLP features for the model using Task View text and Package description text")
##### Reading and Cleaning Text for all Task Views  #####
message("Reading and Cleaning Text for all Task Views ")
TaskViews = RWsearch::tvdb_vec(input_CRAN_data$tvdb)
TaskView_sources_text = vector(length = length(TaskViews), mode = "list")
names(TaskView_sources_text) = TaskViews
for(TaskView in TaskViews){
print(TaskView)
#TaskView = "WebTechnologies"
#TaskView = "Databases"
#TaskView = "OfficialStatistics"
#TaskView = "MachineLearning"
#TaskView = "HighPerformanceComputing"
#TaskView = "ReproducibleResearch"
if(TaskView == "HighPerformanceComputing"){
raw = readLines(paste0("https://raw.githubusercontent.com/cran-task-views/",TaskView,"/master/",TaskView,".md"))
} else{
raw = readLines(paste0("https://raw.githubusercontent.com/cran-task-views/",TaskView,"/main/",TaskView,".md"))
}
YAML = raw[(min(which(raw == "---")) + 1):(max(which(raw == "---")) - 1)]
#TaskView_references = gsub(x = raw_cln, pattern = "`r [^`]*`", " ")
raw_cln =  raw[(max(which(raw == "---")) + 1):length(raw)]
if(any(grepl(pattern = "# Links", x = raw_cln))){
raw_cln =  raw_cln[1:(which(grepl(pattern = "# Links", x = raw_cln)) - 1)]
}
sections = raw_cln[grepl(x = raw_cln , pattern = "#")]
if(TaskView == "ReproducibleResearch"){
positions_of_sections_ReproducibleResearch = which(grepl(x = raw_cln , pattern = "===") | grepl(x = raw_cln , pattern = "---"))
positions_of_sections_ReproducibleResearch = positions_of_sections_ReproducibleResearch - 1
sections = raw_cln[positions_of_sections_ReproducibleResearch]
}
raw_cln = gsub(x = raw_cln, pattern = "`r[^`]*`", " ")
raw_cln = gsub(x = raw_cln, pattern = "`[^`]*`", " ")
raw_cln = gsub(x = raw_cln, pattern = "\\(https:[^()]*\\)", "")
raw_cln = gsub(x = raw_cln, pattern = "\\(http:[^()]*\\)", "")
raw_cln = gsub(x = raw_cln, pattern = "\\(http:.*", "")
raw_cln = gsub(x = raw_cln, pattern = "\\(https:.*", "")
raw_cln = gsub(x = raw_cln, pattern = "\\([^()]*\\)", "")
# Some Task View text does not have separate topics for example the MachineLearning Task View
if(any(grepl(pattern = "#", x = raw_cln))){
intro = raw_cln[1:(min(which(grepl(raw_cln, pattern ="#"))) - 1)]
} else {
intro = raw_cln[1:(min(which(grepl(raw_cln, pattern ="\\*"))) - 1)]
}
intro = stringr::str_squish(intro)
intro = paste(intro, collapse = " ")
raw_cln = raw_cln[!grepl(x = raw_cln , pattern = "##")]
raw_cln = stringr::str_squish(raw_cln)
raw_cln = paste(raw_cln, collapse = " ")
raw_cln = gsub(x = raw_cln, pattern = "\\([^()]*\\)", "")
TaskView_sources_text[[TaskView]] = list(YAML = YAML, sections = sections, intro = intro, clean = raw_cln)
}
n = vector(length = length(TaskViews))
names(n) = TaskViews
first = TaskViews[1]
for(i in TaskViews){
# i= TaskViews[1]
# i= TaskViews[2]
text = paste(TaskView_sources_text[[i]]$clean, collapse = " ")
TaskViews_txt = dplyr::tibble(txt = text)
# unnest_tokens converts the character string to separate words
TaskViews_txt = tidytext::unnest_tokens(TaskViews_txt, word, txt)
# absorbs words into lemma word
TaskViews_txt$word = textstem::lemmatize_words(TaskViews_txt$word)
# remove numbers
TaskViews_txt = data.frame(word = TaskViews_txt$word[is.na(as.numeric(TaskViews_txt$word))])
# count number of times each word appears
TaskViews_txt = dplyr::count(TaskViews_txt, word, sort = TRUE, name = i)
# this is the number of unique words in each document
n[i] = nrow(TaskViews_txt)
if(i == first){
corpus_word_matrix = TaskViews_txt
}else{
corpus_word_matrix = merge(x = corpus_word_matrix, y = TaskViews_txt, by = "word", all = TRUE)
}
}
# changing NA values into zeroes
corpus_word_matrix[is.na(corpus_word_matrix)] = 0
# Creating column that gives the number of documents that a word appears across the corpus
corpus_word_matrix$df = apply(corpus_word_matrix[,c(2:ncol(corpus_word_matrix))], 1, function(x){sum(x > 0)})
corpus_word_matrix$df
#### Calculating TF-IDF  ####
# Getting Term frequencies, number of times word occurs divided by number of unique words in each View
TF = data.frame(word = corpus_word_matrix$word, t(apply(corpus_word_matrix[,c(2:(length(TaskViews) + 1))], 1, function(x){x/n})))
TF
corpus_word_matrix
# calcualting IDF
idf = log(base = 2, length(TaskViews)/(corpus_word_matrix$df))
TF_IDF = data.frame(word = corpus_word_matrix$word, TF[2:(length(TaskViews) + 1)]*t(idf))
TF_IDF
idf
corpus_word_matrix
devtools::document()
??usethis
??CTVsuggest
devtools::document()
??CTVsuggest
devtools::load_all()
??CTVsuggest
??CTVsuggest
help(CTVsuggest)
help(CTVsuggest:::get_data)
library(devtools)
document()
help(CTVsuggest:::get_data)
document()
help(CTVsuggest:::get_data)
help(CTVsuggest:::get_data)
document()
help(CTVsuggest:::get_data)
corpus_word_matrix
input_CRAN_data = CTVsuggest:::get_data(TEST = TEST, limiting_n_observations = limiting_n_observations)
TEST = TRUE
limiting_n_observations = 10
input_CRAN_data = CTVsuggest:::get_data(TEST = TEST, limiting_n_observations = limiting_n_observations)
# This script creates the NLP features for the model using Task View text and Package description text.
message("Creating the NLP features for the model using Task View text and Package description text")
#### ----------------------------------------------------------------------------------------------- ####
#### ----------------------------------------------------------------------------------------------- ####
##### Reading and Cleaning Text for all Task Views  #####
message("Reading and Cleaning Text for all Task Views ")
TaskViews = RWsearch::tvdb_vec(input_CRAN_data$tvdb)
TaskView_sources_text = vector(length = length(TaskViews), mode = "list")
names(TaskView_sources_text) = TaskViews
for(TaskView in TaskViews){
print(TaskView)
#TaskView = "WebTechnologies"
#TaskView = "Databases"
#TaskView = "OfficialStatistics"
#TaskView = "MachineLearning"
#TaskView = "HighPerformanceComputing"
#TaskView = "ReproducibleResearch"
if(TaskView == "HighPerformanceComputing"){
raw = readLines(paste0("https://raw.githubusercontent.com/cran-task-views/",TaskView,"/master/",TaskView,".md"))
} else{
raw = readLines(paste0("https://raw.githubusercontent.com/cran-task-views/",TaskView,"/main/",TaskView,".md"))
}
YAML = raw[(min(which(raw == "---")) + 1):(max(which(raw == "---")) - 1)]
#TaskView_references = gsub(x = raw_cln, pattern = "`r [^`]*`", " ")
raw_cln =  raw[(max(which(raw == "---")) + 1):length(raw)]
if(any(grepl(pattern = "# Links", x = raw_cln))){
raw_cln =  raw_cln[1:(which(grepl(pattern = "# Links", x = raw_cln)) - 1)]
}
sections = raw_cln[grepl(x = raw_cln , pattern = "#")]
if(TaskView == "ReproducibleResearch"){
positions_of_sections_ReproducibleResearch = which(grepl(x = raw_cln , pattern = "===") | grepl(x = raw_cln , pattern = "---"))
positions_of_sections_ReproducibleResearch = positions_of_sections_ReproducibleResearch - 1
sections = raw_cln[positions_of_sections_ReproducibleResearch]
}
raw_cln = gsub(x = raw_cln, pattern = "`r[^`]*`", " ")
raw_cln = gsub(x = raw_cln, pattern = "`[^`]*`", " ")
raw_cln = gsub(x = raw_cln, pattern = "\\(https:[^()]*\\)", "")
raw_cln = gsub(x = raw_cln, pattern = "\\(http:[^()]*\\)", "")
raw_cln = gsub(x = raw_cln, pattern = "\\(http:.*", "")
raw_cln = gsub(x = raw_cln, pattern = "\\(https:.*", "")
raw_cln = gsub(x = raw_cln, pattern = "\\([^()]*\\)", "")
# Some Task View text does not have separate topics for example the MachineLearning Task View
if(any(grepl(pattern = "#", x = raw_cln))){
intro = raw_cln[1:(min(which(grepl(raw_cln, pattern ="#"))) - 1)]
} else {
intro = raw_cln[1:(min(which(grepl(raw_cln, pattern ="\\*"))) - 1)]
}
intro = stringr::str_squish(intro)
intro = paste(intro, collapse = " ")
raw_cln = raw_cln[!grepl(x = raw_cln , pattern = "##")]
raw_cln = stringr::str_squish(raw_cln)
raw_cln = paste(raw_cln, collapse = " ")
raw_cln = gsub(x = raw_cln, pattern = "\\([^()]*\\)", "")
TaskView_sources_text[[TaskView]] = list(YAML = YAML, sections = sections, intro = intro, clean = raw_cln)
}
#### ----------------------------------------------------------------------------------------------- ####
#### ----------------------------------------------------------------------------------------------- ####
##### Creates data frame object that gives the count of each word in each Task View ######
n = vector(length = length(TaskViews))
names(n) = TaskViews
first = TaskViews[1]
for(i in TaskViews){
# i= TaskViews[1]
# i= TaskViews[2]
text = paste(TaskView_sources_text[[i]]$clean, collapse = " ")
TaskViews_txt = dplyr::tibble(txt = text)
# unnest_tokens converts the character string to separate words
TaskViews_txt = tidytext::unnest_tokens(TaskViews_txt, word, txt)
# absorbs words into lemma word
TaskViews_txt$word = textstem::lemmatize_words(TaskViews_txt$word)
# remove numbers
TaskViews_txt = data.frame(word = TaskViews_txt$word[is.na(as.numeric(TaskViews_txt$word))])
# count number of times each word appears
TaskViews_txt = dplyr::count(TaskViews_txt, word, sort = TRUE, name = i)
# this is the number of unique words in each document
n[i] = nrow(TaskViews_txt)
if(i == first){
corpus_word_matrix = TaskViews_txt
}else{
corpus_word_matrix = merge(x = corpus_word_matrix, y = TaskViews_txt, by = "word", all = TRUE)
}
}
# changing NA values into zeroes
corpus_word_matrix[is.na(corpus_word_matrix)] = 0
# Creating column that gives the number of documents that a word appears across the corpus
corpus_word_matrix$df = apply(corpus_word_matrix[,c(2:ncol(corpus_word_matrix))], 1, function(x){sum(x > 0)})
# Getting Term frequencies, number of times word occurs divided by number of unique words in each View
TF = data.frame(word = corpus_word_matrix$word, t(apply(corpus_word_matrix[,c(2:(length(TaskViews) + 1))], 1, function(x){x/n})))
TF
corpus_word_matrix
# calculating IDF.
# Calculated for each word in the corpus by taking the log of the number of task views divided by the number of Task Views that the word appears.
idf = log(base = 2, length(TaskViews)/(corpus_word_matrix$df))
idf
corpus_word_matrix$df
corpus_word_matrix
# Multiply the term frequencies of each word in the Task Views by the idf term for that word.
TF_IDF = data.frame(word = corpus_word_matrix$word, TF[2:(length(TaskViews) + 1)]*t(idf))
# This function accesses package descriptions and titles. Dirk Eddilbettel code
# It takes the most up to date information from CRAN
getPackagesWithTitle <- function() {
contrib.url(getOption("repos")["CRAN"], "source")
description <- sprintf("%s/web/packages/packages.rds",
getOption("repos")["CRAN"])
con <- if(substring(description, 1L, 7L) == "file://") {
file(description, "rb")
} else {
url(description, "rb")
}
on.exit(close(con))
db <- readRDS(gzcon(con))
rownames(db) <- NULL
db[, c("Package", "Title", "Description")]
}
# Using function, get an object with descriptions and titles of all packages
titles_descriptions_packages_data = getPackagesWithTitle()
# Removing duplicated packages
titles_descriptions_packages_data = titles_descriptions_packages_data[!duplicated(titles_descriptions_packages_data[,"Package"]), ]
############ TESTING ###########
# Limits number of observations in dataset to speed up tests
if(input_CRAN_data$TEST){
titles_descriptions_packages_data = titles_descriptions_packages_data[titles_descriptions_packages_data[,"Package"] %in% input_CRAN_data$all_CRAN_pks,]
}
# Creating dataframe object, Titles and Description columns
titles_descriptions_packages = data.frame(Package = titles_descriptions_packages_data[,"Package"],
text = paste(Title = titles_descriptions_packages_data[,"Title"],
Description = titles_descriptions_packages_data[,"Description"]))
# converting to list
titles_descriptions_packages_ls = as.list(titles_descriptions_packages$text)
names(titles_descriptions_packages_ls) = titles_descriptions_packages_data[,"Package"]
# Quick text cleaning
titles_descriptions_packages_ls_cln = lapply(titles_descriptions_packages_ls, function(x){gsub(x, pattern = "[\n]", replacement = " ")})
titles_descriptions_packages_ls_cln = lapply(titles_descriptions_packages_ls_cln, function(x){gsub(x, pattern = "<[^>]+>", replacement = " ")})
# cleaning and converting package text to term frequencies
fun1 = function(x){
text_ls_cln = dplyr::tibble(txt = x)
text_ls_cln = tidytext::unnest_tokens(text_ls_cln, word, txt)
text_ls_cln$word = textstem::lemmatize_words(text_ls_cln$word)
text_ls_cln = data.frame(word = text_ls_cln$word[is.na(as.numeric(text_ls_cln$word))])
text_ls_cln = dplyr::count(text_ls_cln, word, sort = TRUE, name = "test")
return(text_ls_cln)
}
message("cleaning and converting package text to term frequencies")
titles_descriptions_packages_freq = pbapply::pblapply(titles_descriptions_packages_ls_cln, fun1)
titles_descriptions_packages_ls_cln
x = titles_descriptions_packages_ls_cln[[1]]
x
text_ls_cln = dplyr::tibble(txt = x)
text_ls_cln
text_ls_cln = tidytext::unnest_tokens(text_ls_cln, word, txt)
text_ls_cln
text_ls_cln$word = textstem::lemmatize_words(text_ls_cln$word)
text_ls_cln
text_ls_cln = dplyr::tibble(txt = x)
text_ls_cln = tidytext::unnest_tokens(text_ls_cln, word, txt)
text_ls_cln
text_ls_cln$word = textstem::lemmatize_words(text_ls_cln$word)
as.numeric(text_ls_cln$word)
is.na(as.numeric(text_ls_cln$word))
is.numeric(text_ls_cln$word)
text_ls_cln = dplyr::tibble(txt = x)
text_ls_cln = tidytext::unnest_tokens(text_ls_cln, word, txt)
text_ls_cln$word = textstem::lemmatize_words(text_ls_cln$word)
suppressWarnings(
text_ls_cln = data.frame(word = text_ls_cln$word[is.na(as.numeric(text_ls_cln$word))])
)
text_ls_cln = dplyr::tibble(txt = x)
text_ls_cln = tidytext::unnest_tokens(text_ls_cln, word, txt)
text_ls_cln$word = textstem::lemmatize_words(text_ls_cln$word)
suppressWarnings({
text_ls_cln = data.frame(word = text_ls_cln$word[is.na(as.numeric(text_ls_cln$word))])
})
text_ls_cln
text_ls_cln = dplyr::count(text_ls_cln, word, sort = TRUE, name = "test")
# cleaning and converting package text to term frequencies
fun1 = function(x){
text_ls_cln = dplyr::tibble(txt = x)
text_ls_cln = tidytext::unnest_tokens(text_ls_cln, word, txt)
text_ls_cln$word = textstem::lemmatize_words(text_ls_cln$word)
suppressWarnings({
text_ls_cln = data.frame(word = text_ls_cln$word[is.na(as.numeric(text_ls_cln$word))])
})
text_ls_cln = dplyr::count(text_ls_cln, word, sort = TRUE, name = "test")
return(text_ls_cln)
}
message("cleaning and converting package text to term frequencies")
titles_descriptions_packages_freq = pbapply::pblapply(titles_descriptions_packages_ls_cln, fun1)
# Merging package vectors with Task View vectors and then taking cosine similarity
fun2 = function(x){
pkg_tsk_text_comb = merge(x = x, y = TF_IDF, by = "word", all.y = TRUE)
pkg_tsk_text_comb[is.na(pkg_tsk_text_comb)] = 0
# Have included here weighting the package vectors by IDF
pkg_tsk_text_comb$test = pkg_tsk_text_comb$test*(idf)
cosine = lsa::cosine(as.matrix(pkg_tsk_text_comb[,-1]))
cosine = cosine[1,-1]
return(cosine)
}
text_ls_cln = dplyr::tibble(txt = x)
text_ls_cln = tidytext::unnest_tokens(text_ls_cln, word, txt)
text_ls_cln$word = textstem::lemmatize_words(text_ls_cln$word)
suppressWarnings({
text_ls_cln = data.frame(word = text_ls_cln$word[is.na(as.numeric(text_ls_cln$word))])
})
text_ls_cln = dplyr::count(text_ls_cln, word, sort = TRUE, name = "test")
text_ls_cln
idf
titles_descriptions_packages_freq = pbapply::pblapply(titles_descriptions_packages_ls_cln, fun1)
titles_descriptions_packages_freq
TF_IDF
x = titles_descriptions_packages_freq[[1]]
x
pkg_tsk_text_comb = merge(x = x, y = TF_IDF, by = "word", all.y = TRUE)
pkg_tsk_text_comb
titles_descriptions_packages_freq = pbapply::pblapply(titles_descriptions_packages_ls_cln, fun1)
# Merging package vectors with Task View vectors and then taking cosine similarity
fun2 = function(x){
pkg_tsk_text_comb = merge(x = x, y = TF_IDF, by = "word", all.y = TRUE)
pkg_tsk_text_comb[is.na(pkg_tsk_text_comb)] = 0
# Have included here weighting the package vectors by IDF
pkg_tsk_text_comb$test = pkg_tsk_text_comb$test*(idf)
cosine = lsa::cosine(as.matrix(pkg_tsk_text_comb[,-1]))
cosine = cosine[1,-1]
return(cosine)
}
message("Merging package vectors with Task View vectors and then taking cosine similarity")
titles_descriptions_packages_cosine = pbapply::pblapply(titles_descriptions_packages_freq, fun2)
feature_matrix_titles_descriptions_packages_cosine = titles_descriptions_packages_cosine
feature_matrix_titles_descriptions_packages_cosine
typeof(feature_matrix_titles_descriptions_packages_cosine)
get_NLP_output = CTVsuggest:::get_NLP(TEST = TEST, limiting_n_observations = limiting_n_observations)
TEST = TRUE
limiting_n_observations = 100
get_NLP_output = CTVsuggest:::get_NLP(TEST = TEST, limiting_n_observations = limiting_n_observations)
input_CRAN_data = get_NLP_output$input_CRAN_data
tvdb = input_CRAN_data$tvdb
input_CRAN_data$CRAN_cranly_data$package
# Identifying packages with no authors
index_of_no_authors = which(unlist(lapply(input_CRAN_data$CRAN_cranly_data$author, length)) == 0)
# replacing with maintainers
if(length(which(unlist(lapply(input_CRAN_data$CRAN_cranly_data$author, length)) == 0)) > 0){
for(i in 1:length(which(unlist(lapply(input_CRAN_data$CRAN_cranly_data$author, length)) == 0))){
#i = 1
input_CRAN_data$CRAN_cranly_data$author[[index_of_no_authors[i]]] = input_CRAN_data$CRAN_cranly_data$maintainer[index_of_no_authors[i]]
}
}
##### Building author and package networks ####
# Note that if running a test and have restricted the number of packages,
# when building the package network the number of packages listed in the node set will increase.
# Because we are looking at all dependencies of these packages.
# Building the package network will also add packages that are not hosted on CRAN but are hosted on other repos.
aut_network <- cranly::build_network(input_CRAN_data$CRAN_cranly_data, perspective = 'author')
pac_network <- cranly::build_network(input_CRAN_data$CRAN_cranly_data, perspective = 'package')
input_CRAN_data$CRAN_cranly_data
cranly::build_network(input_CRAN_data$CRAN_cranly_data, perspective = 'package')
get_NLP_output = CTVsuggest:::get_NLP(TEST = TEST, limiting_n_observations = limiting_n_observations)
input_CRAN_data = get_NLP_output$input_CRAN_data
tvdb = input_CRAN_data$tvdb
#### Objects needed to run generated by previous script ####
# tvdb
# CRAN_data
# CRAN_cranly_data
# all_CRAN_pks
# feature_matrix_titles_descriptions_packages_cosine
##### Objects Outputted ####
# response_matrix
# features
# All_data
# pac_network_igraph
#### ----------------------------------------------------------------------------------------------- ####
#### Replacing missing authors with maintainers ####
# For some packages on CRAN the authors have not been listed in the standard way.
# Which causes these packages to have zero authors listed.
# The work around I have used is by setting the maintainer as the author
# Identifying packages with no authors
index_of_no_authors = which(unlist(lapply(input_CRAN_data$CRAN_cranly_data$author, length)) == 0)
# replacing with maintainers
if(length(which(unlist(lapply(input_CRAN_data$CRAN_cranly_data$author, length)) == 0)) > 0){
for(i in 1:length(which(unlist(lapply(input_CRAN_data$CRAN_cranly_data$author, length)) == 0))){
#i = 1
input_CRAN_data$CRAN_cranly_data$author[[index_of_no_authors[i]]] = input_CRAN_data$CRAN_cranly_data$maintainer[index_of_no_authors[i]]
}
}
#### ----------------------------------------------------------------------------------------------- ####
##### Building author and package networks ####
# Note that if running a test and have restricted the number of packages,
# when building the package network the number of packages listed in the node set will increase.
# Because we are looking at all dependencies of these packages.
# Building the package network will also add packages that are not hosted on CRAN but are hosted on other repos.
aut_network <- cranly::build_network(input_CRAN_data$CRAN_cranly_data, perspective = 'author')
pac_network <- cranly::build_network(input_CRAN_data$CRAN_cranly_data, perspective = 'package')
All_data = list("aut_network" = aut_network, "pac_network" = pac_network)
# All_data_igraph = as.igraph(All_data$pac_network)
pac_network_igraph = igraph::as.igraph(All_data$pac_network)
devtools::load_all()
CTVsuggest::Train_model(TEST = T, limiting_n_observations = 4000, save = T)
install.packages(devtools)
install.packages("devtools")
sessionInfo()
sessionInfo()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::load_all()
devtools::load_all()
